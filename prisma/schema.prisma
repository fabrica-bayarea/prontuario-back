// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or the database of your choice
  url      = env("DATABASE_URL")
}

enum Status {
  SCHEDULED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserType {
  ADMINISTRATOR
  COLLABORATOR
  REGISTRAR
  BENEFICIARY
}

enum Relationship {
  FATHER
  MOTHER
  BROTHER
  SISTER
  SON
  DAUGHTER
  OTHER
}

model AppointmentPeriod {
  id         Int      @id @default(autoincrement())
  Program    Program  @relation(fields: [programId], references: [id])
  programId  Int
  startDate  DateTime
  endDate    DateTime
  startTime  String   @db.Char(5)
  endTime    String   @db.Char(5)
  daysOfWeek Int

  slot        Slot[]
  appointment Appointment[]
}

model Appointment {
  id                  Int               @id @default(autoincrement())
  AppointmentPeriod   AppointmentPeriod @relation(fields: [appointmentPeriodId], references: [id])
  appointmentPeriodId Int
  Beneficiary         User              @relation(fields: [beneficiaryId], references: [id])
  beneficiaryId       Int
  Slot                Slot              @relation(fields: [slotId], references: [id])
  slotId              Int
  status              Status            @default(SCHEDULED)
  observation         String?           @db.VarChar(800)
}

model Slot {
  id                  Int               @id @default(autoincrement())
  Collaborator        User              @relation(fields: [collaboratorId], references: [id])
  collaboratorId      Int
  AppointmentPeriod   AppointmentPeriod @relation(fields: [appointmentPeriodId], references: [id])
  appointmentPeriodId Int
  startDateTime       DateTime
  endDateTime         DateTime

  appointment Appointment[]
}

model Course {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar(150)
  description String @db.VarChar(500)
  coordinator String @db.VarChar(150)
  campus      String @db.VarChar(150)

  user    User[]    @relation("UserCourse")
  program Program[] @relation("CourseProgram")
}

model Program {
  id             Int    @id @default(autoincrement())
  name           String @unique @db.VarChar(150)
  description    String @db.VarChar(500)
  targetAudience String @db.VarChar(100)

  course            Course[]            @relation("CourseProgram")
  user              User[]              @relation("UserProgram")
  appointmentPeriod AppointmentPeriod[]
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String   @db.VarChar(50)
  lastName     String   @db.VarChar(200)
  cpf          String   @unique @db.Char(14)
  active       Boolean  @default(true)
  cep          String   @db.Char(9)
  city         String   @db.VarChar(200)
  address      String   @db.VarChar(300)
  birthDate    DateTime
  gender       Gender
  email        String   @unique @db.VarChar(360)
  hash         String
  phone        String   @db.Char(14)
  userType     UserType
  registration String?  @db.VarChar(15)

  course      Course[]      @relation("UserCourse")
  program     Program[]     @relation("UserProgram")
  dependent   Dependent[]
  appointment Appointment[]
  slot        Slot[]
}

model Dependent {
  id           Int          @id @default(autoincrement())
  User         User         @relation(fields: [userId], references: [id])
  userId       Int
  firstName    String       @db.VarChar(50)
  lastName     String       @db.VarChar(200)
  cpf          String       @unique @db.Char(14)
  birthDate    DateTime
  gender       Gender
  relationship Relationship
  specialNeeds String?      @db.VarChar(500)
  email        String       @unique @db.VarChar(360)
  phone        String       @db.Char(14)
}